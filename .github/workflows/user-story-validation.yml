name: User Story Validation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  validate-stories:
    name: Validate User Stories
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run story validation
        run: npm run validate:stories

      - name: Upload validation report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: user-story-validation-report
          path: user-story-validation-report.md

      - name: Comment PR with validation results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('user-story-validation-report.md', 'utf8');
            
            // 既存のコメントを探す
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## ユーザーストーリー検証レポート')
            );
            
            const body = `## ユーザーストーリー検証レポート\n\n${report}`;
            
            if (botComment) {
              // 既存のコメントを更新
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // 新しいコメントを作成
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  test-stories:
    name: Run Story-based Tests
    runs-on: ubuntu-latest
    needs: validate-stories
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run story tests
        run: npm run test:stories

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: story-test-results
          path: test-results/

      - name: Upload test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: story-test-report
          path: playwright-report/